import React, { useState, useEffect, useMemo, useCallback } from "react";
import {
  Layout,
  Menu,
  notification,
  Modal,
  Form,
  Input,
  Button,
  Upload,
  Dropdown,
  Avatar,
  Space,
  Divider,
  Card,
  Typography,
  Row,
  Col,
} from "antd";
import {
  UsergroupAddOutlined,
  HomeOutlined,
  CalendarOutlined,
  BookOutlined,
  UserAddOutlined,
  ReadOutlined,
  ContainerOutlined,
  FolderOutlined,
  FileTextOutlined,
  MenuFoldOutlined,
  MenuUnfoldOutlined,
  LogoutOutlined,
  SettingOutlined,
  UserOutlined,
  LockOutlined,
  PlusOutlined,
  DownOutlined,
  EditOutlined,
  PhoneOutlined,
  MailOutlined,
} from "@ant-design/icons";
import Cookies from "js-cookie";
import PropTypes from "prop-types";
import { Link, useNavigate } from "react-router-dom";
import useAuth from "../hooks/useAuth";
import useAccountTeam from "../hooks/useAccountTeam";
import logo from "../assets/file.png";
import SignalRService from "../config/signalRService";

const { Sider, Content } = Layout;
const { Text } = Typography;

const getItem = (label, key, icon, children, path) => {
  const item = {
    key,
    icon,
    children,
    label: path ? <Link to={path}>{label}</Link> : label,
  };

  return item;
};

const DashboardLayout = React.memo(({ children }) => {
  const [collapsed, setCollapsed] = useState(false);
  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);
  const { infoUser, fetchUserInfo, logout, checkAccountStatus } = useAuth();
  const { updateAccountPassword, updateAccountTeam } = useAccountTeam();
  const [isProfileModalVisible, setIsProfileModalVisible] = useState(false);
  const [isPasswordModalVisible, setIsPasswordModalVisible] = useState(false);
  const [passwordForm] = Form.useForm();
  const [profileForm] = Form.useForm();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isProfileSubmitting, setIsProfileSubmitting] = useState(false);
  const navigate = useNavigate();
  const userId = Cookies.get("__id");
  const userRole = Cookies.get("__role");
  const userInfo = infoUser?.data;
  const [isEditMode, setIsEditMode] = useState(false);
  const [uploadedAvatar, setUploadedAvatar] = useState([]);
  const [avatarUrl, setAvatarUrl] = useState("");

  // Theo d√µi k√≠ch th∆∞·ªõc m√†n h√¨nh ƒë·ªÉ ƒë√°p ·ª©ng thi·∫øt b·ªã
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth < 768);
      if (window.innerWidth < 768) {
        setCollapsed(true);
      }
    };

    window.addEventListener("resize", handleResize);
    handleResize(); // Ki·ªÉm tra k√≠ch th∆∞·ªõc ban ƒë·∫ßu

    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);

  // Thi·∫øt l·∫≠p ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n ƒë·ªãnh k·ª≥
  useEffect(() => {
    // Ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n ngay khi component ƒë∆∞·ª£c mount
    checkAccountStatus();

    // Thi·∫øt l·∫≠p interval ƒë·ªÉ ki·ªÉm tra ƒë·ªãnh k·ª≥ (2 ph√∫t m·ªôt l·∫ßn)
    const statusCheckInterval = setInterval(
      () => {
        checkAccountStatus();
      },
      2 * 60 * 1000
    ); // 2 ph√∫t

    // X√≥a interval khi component unmount
    return () => {
      clearInterval(statusCheckInterval);
    };
  }, [checkAccountStatus]);

  // Thi·∫øt l·∫≠p SignalR cho t·∫•t c·∫£ vai tr√≤
  useEffect(() => {
    // B·∫Øt ƒë·∫ßu k·∫øt n·ªëi v·ªõi SignalR khi component ƒë∆∞·ª£c mount
    SignalRService.start()
      .then(() => {
        console.log("SignalR k·∫øt n·ªëi th√†nh c√¥ng");
      })
      .catch((err) => {
        console.error("L·ªói k·∫øt n·ªëi SignalR:", err);
      });

    // Cleanup khi component unmount
    return () => {
      // Ng·∫Øt k·∫øt n·ªëi c√≥ th·ªÉ ƒë∆∞·ª£c th·ª±c hi·ªán trong t∆∞∆°ng lai n·∫øu c·∫ßn
    };
  }, []);

  // Menu items cho Admin
  const adminItems = useMemo(
    () => [
      getItem("T·ªïng Quan", "1", <HomeOutlined />, null, "/admin/overview"),
      getItem(
        "Tri·ªÉn L√£m C·ªßa T√¥i",
        "2",
        <CalendarOutlined />,
        null,
        "/admin/showList"
      ),
      getItem("Ng∆∞·ªùi D√πng", "sub2", <UserAddOutlined />, null, "/admin/users"),
      getItem(
        "Qu·∫£n L√Ω Nh√≥m",
        "sub3",
        <UsergroupAddOutlined />,
        null,
        "/admin/teams"
      ),
      getItem(
        "Tin T·ª©c",
        "sub4",
        <ReadOutlined />,
        [
          getItem(
            "Tin t·ª©c t·ªïng h·ª£p",
            "news_overview",
            <FileTextOutlined />,
            null,
            "/admin/news/overview"
          ),
          getItem(
            "Chuy√™n m·ª•c",
            "news_category",
            <FileTextOutlined />,
            null,
            "/admin/news/category"
          ),
        ],
        null
      ),
      getItem("Ti√™u ch√≠", "sub5", <BookOutlined />, null, "/admin/criteria"),
      getItem(
        "Gi·ªëng Koi",
        "sub6",
        <ContainerOutlined />,
        null,
        "/admin/variety"
      ),
    ],
    []
  );

  // Menu items cho Manager
  const managerItems = useMemo(
    () => [
      getItem(
        "Tri·ªÉn L√£m C·ªßa T√¥i",
        "1",
        <CalendarOutlined />,
        null,
        "/manager/showList"
      ),
      getItem(
        "Qu·∫£n L√Ω Nh√≥m",
        "2",
        <UsergroupAddOutlined />,
        null,
        "/manager/teams"
      ),
      getItem("Tin T·ª©c", "3", <ReadOutlined />, null, "/manager/news"),
    ],
    []
  );

  // Menu items cho Staff
  const staffItems = useMemo(
    () => [
      getItem(
        "Tri·ªÉn L√£m C·ªßa T√¥i",
        "1",
        <CalendarOutlined />,
        null,
        "/staff/showList"
      ),
      getItem("Tin T·ª©c", "2", <ReadOutlined />, null, "/staff/news"),
    ],
    []
  );

  // Menu items cho Referee
  const refereeItems = useMemo(
    () => [
      getItem(
        "Tri·ªÉn L√£m C·ªßa T√¥i",
        "1",
        <CalendarOutlined />,
        null,
        "/referee/showList"
      ),
      getItem("Tin T·ª©c", "2", <ReadOutlined />, null, "/referee/news"),
    ],
    []
  );

  // X√°c ƒë·ªãnh menu items d·ª±a tr√™n vai tr√≤
  const getMenuItemsByRole = () => {
    switch (userRole) {
      case "Admin":
        return adminItems;
      case "Manager":
        return managerItems;
      case "Staff":
        return staffItems;
      case "Referee":
        return refereeItems;
      default:
        return []; // Tr·∫£ v·ªÅ menu tr·ªëng n·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c vai tr√≤
    }
  };

  const fetchUserCallback = useCallback(() => {
    if (userId) {
      fetchUserInfo(userId);
    }
  }, [fetchUserInfo, userId]);

  useEffect(() => {
    fetchUserCallback();
  }, [fetchUserCallback]);

  const handleLogout = () => {
    // G·ªçi h√†m logout t·ª´ hook (gi·∫£ ƒë·ªãnh r·∫±ng notification ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong hook)
    logout();
    // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
    navigate("/");
  };

  // X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n dashboard d·ª±a v√†o vai tr√≤
  const getDashboardPath = () => {
    switch (userRole) {
      case "admin":
        return "/admin";
      case "manager":
        return "/manager";
      case "staff":
        return "/staff";
      case "referee":
        return "/referee";
      default:
        return "/";
    }
  };

  // M·ªü modal ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n
  const showProfileModal = () => {
    if (userInfo) {
      setAvatarUrl(userInfo.avatar || "");

      // N·∫øu c√≥ avatar, hi·ªÉn th·ªã trong danh s√°ch uploaded
      if (userInfo.avatar) {
        setUploadedAvatar([
          {
            uid: "-1",
            name: "avatar.png",
            status: "done",
            url: userInfo.avatar,
          },
        ]);
      } else {
        setUploadedAvatar([]);
      }

      // Reset form v·ªõi ƒë√∫ng t√™n tr∆∞·ªùng theo Form.Item
      profileForm.setFieldsValue({
        FullName: userInfo.fullName,
        Username: userInfo.username,
        Phone: userInfo.phone,
      });
    }
    setIsEditMode(false);
    setIsProfileModalVisible(true);
  };

  // Chuy·ªÉn sang ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
  const enableEditMode = () => {
    setIsEditMode(true);
  };

  // ƒê√≥ng modal ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n
  const handleProfileCancel = () => {
    setIsProfileModalVisible(false);
    setIsEditMode(false);
    profileForm.resetFields();
  };

  // ƒê√≥ng modal ƒë·ªïi m·∫≠t kh·∫©u
  const handlePasswordCancel = () => {
    setIsPasswordModalVisible(false);
    passwordForm.resetFields();
  };

  // X·ª≠ l√Ω ƒë·ªïi m·∫≠t kh·∫©u
  const handlePasswordChange = async (values) => {
    setIsSubmitting(true);

    try {
      if (values.newPassword !== values.confirmNewPassword) {
        notification.error({
          message: "L·ªói",
          description: "M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng tr√πng kh·ªõp!",
        });
        setIsSubmitting(false);
        return;
      }

      // G·ªçi API ƒë·ªïi m·∫≠t kh·∫©u - notification ƒë∆∞·ª£c x·ª≠ l√Ω trong hook
      const response = await updateAccountPassword({
        oldPassword: values.oldPassword,
        newPassword: values.newPassword,
        confirmNewPassword: values.confirmNewPassword,
      });

      // Ch·ªâ x·ª≠ l√Ω UI n·∫øu th√†nh c√¥ng
      if (response.success) {
        setIsPasswordModalVisible(false);
        passwordForm.resetFields();
      }
    } catch (error) {
      console.error("L·ªói ƒë·ªïi m·∫≠t kh·∫©u:", error);
      // Kh√¥ng c·∫ßn hi·ªÉn th·ªã notification ·ªü ƒë√¢y, ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong hook
    } finally {
      setIsSubmitting(false);
    }
  };

  // Th√™m h√†m urlToBlob ƒë·ªÉ chuy·ªÉn URL th√†nh File
  const urlToBlob = async (url) => {
    try {
      console.log("üîÑ ƒêang t·∫£i ·∫£nh t·ª´ URL:", url);

      const response = await fetch(url);
      if (!response.ok) {
        throw new Error("Kh√¥ng th·ªÉ t·∫£i ·∫£nh t·ª´ URL!");
      }

      const blob = await response.blob();
      return new File([blob], "avatar.jpg", { type: blob.type });
    } catch (error) {
      console.error("üö® L·ªói khi chuy·ªÉn URL th√†nh file:", error);
      return null;
    }
  };

  // S·ª≠a h√†m x·ª≠ l√Ω upload ·∫£nh ƒë·ªÉ l∆∞u tr·ªØ file g·ªëc thay v√¨ upload l√™n Cloudinary
  const handleAvatarUpload = ({ fileList }) => {
    if (fileList.length > 0) {
      // X√≥a ·∫£nh c≈© tr∆∞·ªõc khi c·∫≠p nh·∫≠t
      setUploadedAvatar(fileList);
      // Hi·ªÉn th·ªã preview
      const file = fileList[0];
      if (file.originFileObj) {
        const previewUrl = URL.createObjectURL(file.originFileObj);
        // L∆∞u tr·ªØ file ƒë·ªÉ s·ª≠ d·ª•ng khi c·∫≠p nh·∫≠t
        setAvatarUrl(previewUrl);
      } else if (file.url) {
        setAvatarUrl(file.url);
      }
    } else {
      setUploadedAvatar([]);
      setAvatarUrl("");
    }
  };

  // S·ª≠a h√†m x·ª≠ l√Ω c·∫≠p nh·∫≠t profile ƒë·ªÉ s·ª≠ d·ª•ng FormData v√† g·ª≠i file tr·ª±c ti·∫øp
  const handleProfileUpdate = async (values) => {
    setIsProfileSubmitting(true);

    try {
      console.log("Gi√° tr·ªã form tr∆∞·ªõc khi t·∫°o FormData:", values);

      // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
      if (!values.FullName || !values.Username || !values.Phone) {
        // Kh√¥ng c·∫ßn hi·ªÉn th·ªã notification ·ªü ƒë√¢y, ch·ªâ tr·∫£ v·ªÅ ƒë·ªÉ tr√°nh g·ªçi API
        setIsProfileSubmitting(false);
        return;
      }

      // T·∫°o FormData
      const formData = new FormData();

      // Th√™m c√°c tr∆∞·ªùng th√¥ng tin v·ªõi ƒë·∫ßy ƒë·ªß gi√° tr·ªã
      formData.append("FullName", values.FullName);
      formData.append("Username", values.Username);
      formData.append("Phone", values.Phone);

      // X·ª≠ l√Ω ·∫£nh ƒë·∫°i di·ªán
      let avatarFile = null;

      if (uploadedAvatar.length > 0 && uploadedAvatar[0].originFileObj) {
        // N·∫øu c√≥ file m·ªõi upload
        avatarFile = uploadedAvatar[0].originFileObj;
      } else if (userInfo?.avatar) {
        // N·∫øu d√πng ·∫£nh c≈© t·ª´ URL
        avatarFile = await urlToBlob(userInfo.avatar);
      }

      if (avatarFile) {
        formData.append("AvatarUrl", avatarFile);
      }

      // Log r√µ r√†ng c√°c gi√° tr·ªã trong FormData
      console.log("üî• FormData ƒë∆∞·ª£c g·ª≠i l√™n:");
      for (let pair of formData.entries()) {
        if (pair[0] === "AvatarUrl") {
          console.log(
            pair[0],
            "File h√¨nh ·∫£nh:",
            pair[1].name,
            pair[1].size,
            "bytes",
            pair[1].type
          );
        } else {
          console.log(pair[0], pair[1]);
        }
      }

      // G·ªçi API c·∫≠p nh·∫≠t th√¥ng tin - Th√¥ng b√°o ƒë∆∞·ª£c x·ª≠ l√Ω trong hook
      const response = await updateAccountTeam(userId, formData);
      console.log("K·∫øt qu·∫£ t·ª´ API:", response);

      // Ch·ªâ x·ª≠ l√Ω UI n·∫øu th√†nh c√¥ng
      if (response.success) {
        // C·∫≠p nh·∫≠t l·∫°i th√¥ng tin ng∆∞·ªùi d√πng
        fetchUserInfo(userId);
        setIsProfileModalVisible(false);
        setIsEditMode(false);
      }
    } catch (error) {
      console.error("L·ªói c·∫≠p nh·∫≠t th√¥ng tin:", error);
      // Kh√¥ng c·∫ßn hi·ªÉn th·ªã notification ·ªü ƒë√¢y, ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong hook
    } finally {
      setIsProfileSubmitting(false);
    }
  };

  return (
    <Layout className="min-h-screen">
      <Sider
        width={230}
        breakpoint="lg"
        collapsedWidth={isMobile ? "0" : "70"}
        collapsible
        collapsed={collapsed}
        onCollapse={(value) => setCollapsed(value)}
        theme="light"
        className="fixed h-full z-10 shadow-md"
        trigger={null}
      >
        <div className="flex justify-center py-4">
          <img
            className={`object-cover select-none transition-all duration-300 ${collapsed ? "w-10 h-10" : "w-1/2"}`}
            src={logo}
            alt="Logo"
          />
        </div>
        <Menu
          theme="light"
          defaultSelectedKeys={["1"]}
          mode="inline"
          className="select-none"
          items={getMenuItemsByRole()}
        />
      </Sider>

      <Layout
        className={`transition-all duration-300 ${collapsed ? "ml-[70px]" : "ml-[230px]"} ${isMobile && collapsed ? "ml-0" : ""}`}
      >
        <header className="header pr-4 flex justify-between items-center fixed z-50 h-16 backdrop-blur-[5px] bg-[#f9fafba8] transition duration-200 ease-in-out w-full shadow-sm">
          <div className="pl-4">
            {React.createElement(
              collapsed ? MenuUnfoldOutlined : MenuFoldOutlined,
              {
                className: "text-xl cursor-pointer",
                onClick: () => setCollapsed(!collapsed),
              }
            )}
          </div>
          <div className="flex items-center gap-2">
            <Dropdown
              menu={{
                items: [
                  {
                    key: "1",
                    icon: <UserOutlined />,
                    label: "Th√¥ng tin c√° nh√¢n",
                    onClick: showProfileModal,
                  },
                  {
                    key: "2",
                    icon: <LockOutlined />,
                    label: "ƒê·ªïi m·∫≠t kh·∫©u",
                    onClick: () => setIsPasswordModalVisible(true),
                  },
                  {
                    type: "divider",
                  },
                  {
                    key: "3",
                    icon: <LogoutOutlined />,
                    label: "ƒêƒÉng xu·∫•t",
                    onClick: handleLogout,
                    danger: true,
                  },
                ],
              }}
              placement="bottomRight"
              arrow
            >
              <div className="flex items-center gap-2 cursor-pointer hover:bg-gray-100 px-3 py-1 rounded-full transition-all">
                <Avatar
                  size="large"
                  src={
                    userInfo?.avatar ||
                    "https://anhcute.net/wp-content/uploads/2024/08/Tranh-chibi-Capybara-sieu-de-thuong.jpg"
                  }
                  icon={!userInfo?.avatar && <UserOutlined />}
                />
                <div className="flex flex-col">
                  <strong className="text-sm md:text-base">
                    {userInfo?.fullName || "Ng∆∞·ªùi d√πng"}
                  </strong>
                  <span className="text-gray-500 text-xs">
                    {userRole || "Kh√°ch"}
                  </span>
                </div>
                <DownOutlined style={{ fontSize: "12px" }} />
              </div>
            </Dropdown>
          </div>
        </header>

        <Content className="mt-[70px] py-5">{children}</Content>

        {/* Modal ƒê·ªïi m·∫≠t kh·∫©u */}
        <Modal
          title="ƒê·ªïi m·∫≠t kh·∫©u"
          open={isPasswordModalVisible}
          onCancel={handlePasswordCancel}
          footer={null}
        >
          <Form
            form={passwordForm}
            layout="vertical"
            onFinish={handlePasswordChange}
          >
            <Form.Item
              name="oldPassword"
              label="M·∫≠t kh·∫©u hi·ªán t·∫°i"
              rules={[
                {
                  required: true,
                  message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i!",
                },
              ]}
            >
              <Input.Password placeholder="Nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i" />
            </Form.Item>

            <Form.Item
              name="newPassword"
              label="M·∫≠t kh·∫©u m·ªõi"
              rules={[
                {
                  required: true,
                  message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi!",
                },
                {
                  min: 6,
                  message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!",
                },
              ]}
            >
              <Input.Password placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi" />
            </Form.Item>

            <Form.Item
              name="confirmNewPassword"
              label="X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi"
              dependencies={["newPassword"]}
              rules={[
                {
                  required: true,
                  message: "Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi!",
                },
                ({ getFieldValue }) => ({
                  validator(_, value) {
                    if (!value || getFieldValue("newPassword") === value) {
                      return Promise.resolve();
                    }
                    return Promise.reject(
                      new Error(
                        "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp v·ªõi m·∫≠t kh·∫©u m·ªõi!"
                      )
                    );
                  },
                }),
              ]}
            >
              <Input.Password placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi" />
            </Form.Item>

            <Form.Item className="mb-0">
              <div className="flex justify-end gap-2">
                <Button onClick={handlePasswordCancel}>H·ªßy</Button>
                <Button type="primary" htmlType="submit" loading={isSubmitting}>
                  ƒê·ªïi m·∫≠t kh·∫©u
                </Button>
              </div>
            </Form.Item>
          </Form>
        </Modal>

        {/* Modal C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n */}
        <Modal
          title="Th√¥ng tin c√° nh√¢n"
          open={isProfileModalVisible}
          onCancel={handleProfileCancel}
          footer={
            isEditMode
              ? null
              : [
                  <Button
                    key="edit"
                    type="primary"
                    onClick={enableEditMode}
                    icon={<EditOutlined />}
                  >
                    Ch·ªânh s·ª≠a
                  </Button>,
                  <Button key="close" onClick={handleProfileCancel}>
                    ƒê√≥ng
                  </Button>,
                ]
          }
          width={500}
        >
          {isEditMode ? (
            // Ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
            <Form
              form={profileForm}
              layout="vertical"
              onFinish={handleProfileUpdate}
              initialValues={
                userInfo
                  ? {
                      FullName: userInfo.fullName,
                      Username: userInfo.userName,
                      Phone: userInfo.phone,
                    }
                  : {}
              }
            >
              <Form.Item label="·∫¢nh ƒë·∫°i di·ªán">
                <div className="flex items-center">
                  <div>
                    <Upload
                      accept=".jpg,.jpeg,.png"
                      listType="picture-card"
                      fileList={uploadedAvatar}
                      onChange={handleAvatarUpload}
                      beforeUpload={() => false}
                      maxCount={1}
                    >
                      {uploadedAvatar.length > 0 ? null : <PlusOutlined />}
                    </Upload>
                  </div>

                  <div>
                    {avatarUrl ? (
                      <img
                        src={avatarUrl}
                        alt="avatar"
                        style={{
                          width: "100px",
                          height: "100px",
                          objectFit: "cover",
                          borderRadius: "4px",
                        }}
                      />
                    ) : null}
                  </div>
                </div>
              </Form.Item>

              <Form.Item
                name="FullName"
                label="H·ªç v√† t√™n"
                rules={[
                  {
                    required: true,
                    message: "Vui l√≤ng nh·∫≠p h·ªç v√† t√™n!",
                  },
                ]}
              >
                <Input placeholder="Nh·∫≠p h·ªç v√† t√™n" />
              </Form.Item>

              <Form.Item
                name="Username"
                label="T√™n ƒëƒÉng nh·∫≠p"
                rules={[
                  {
                    required: true,
                    message: "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p!",
                  },
                ]}
              >
                <Input placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p" />
              </Form.Item>

              <Form.Item
                name="Phone"
                label="S·ªë ƒëi·ªán tho·∫°i"
                rules={[
                  {
                    required: true,
                    message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!",
                  },
                  {
                    pattern: /^[0-9]{10,11}$/,
                    message: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!",
                  },
                ]}
              >
                <Input placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" />
              </Form.Item>

              <Form.Item className="mb-0">
                <div className="flex justify-end gap-2">
                  <Button onClick={handleProfileCancel}>H·ªßy</Button>
                  <Button
                    type="primary"
                    htmlType="submit"
                    loading={isProfileSubmitting}
                  >
                    C·∫≠p nh·∫≠t
                  </Button>
                </div>
              </Form.Item>
            </Form>
          ) : (
            // Ch·∫ø ƒë·ªô xem
            <Card bordered={false}>
              <div className="text-center mb-6">
                <Avatar
                  size={120}
                  src={
                    userInfo?.avatar ||
                    "https://anhcute.net/wp-content/uploads/2024/08/Tranh-chibi-Capybara-sieu-de-thuong.jpg"
                  }
                  icon={!userInfo?.avatar && <UserOutlined />}
                />
                <h2 className="mt-3 text-xl font-bold">{userInfo?.fullName}</h2>
                <Text type="secondary">{userRole || "Kh√°ch"}</Text>
              </div>

              <Divider style={{ marginTop: 0 }} />

              <Row className="mb-3">
                <Col span={24}>
                  <Space>
                    <UserOutlined />
                    <Text strong>T√™n ƒëƒÉng nh·∫≠p: </Text>
                  </Space>
                  <Text className="mx-1">
                    {userInfo?.username ?? "Ch∆∞a c√≥"}
                  </Text>
                </Col>
              </Row>

              <Row className="mb-3">
                <Col span={24}>
                  <Space>
                    <PhoneOutlined />
                    <Text strong>S·ªë ƒëi·ªán tho·∫°i: </Text>
                  </Space>
                  <Text className="mx-1">{userInfo?.phone ?? "N/A"}</Text>
                </Col>
              </Row>

              <Row className="mb-3">
                <Col span={24}>
                  <Space>
                    <MailOutlined />
                    <Text strong>Email: </Text>
                  </Space>
                  <Text className="mx-1">{userInfo?.email}</Text>
                </Col>
              </Row>
            </Card>
          )}
        </Modal>
      </Layout>
    </Layout>
  );
});

DashboardLayout.propTypes = {
  children: PropTypes.node.isRequired,
};

export default DashboardLayout;
